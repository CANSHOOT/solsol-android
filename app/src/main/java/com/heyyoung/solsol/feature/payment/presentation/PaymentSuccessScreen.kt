package com.heyyoung.solsol.feature.payment.presentation

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Check
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Divider
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.heyyoung.solsol.R
import com.heyyoung.solsol.feature.payment.domain.PaymentResult

@Composable
fun PaymentSuccessScreen(
    paymentResult: PaymentResult? = null,
    onComplete: () -> Unit = {}
) {
    val purple = Color(0xFF8B5FBF)
    val textMain = Color(0xFF2D3748)
    val textSub = Color(0xFF718096)

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
            .padding(horizontal = 20.dp), // Ï¢åÏö∞ Ïó¨Î∞± Í≥†Ï†ï
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Spacer(Modifier.height(72.dp))

        // Ï≤¥ÌÅ¨ ÏïÑÏù¥ÏΩò
        Box(
            modifier = Modifier
                .size(96.dp)
                .shadow(
                    elevation = 14.dp,
                    spotColor = purple.copy(alpha = 0.18f),
                    ambientColor = purple.copy(alpha = 0.12f),
                    shape = CircleShape
                )
                .background(purple, CircleShape),
            contentAlignment = Alignment.Center
        ) {
            Icon(
                Icons.Default.Check,
                contentDescription = null,
                tint = Color.White,
                modifier = Modifier.size(56.dp)
            )
        }

        Spacer(Modifier.height(20.dp))

        // Ìó§ÎìúÎùºÏù∏
        Text(
            text = "Í≤∞Ï†ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§",
            fontSize = 22.sp,
            fontWeight = FontWeight.SemiBold,
            color = textMain,
            textAlign = TextAlign.Center
        )

        // Í≤∞Ï†ú Í∏àÏï°
        val finalAmount = paymentResult?.finalAmount ?: 0
        Spacer(Modifier.height(6.dp))
        Text(
            text = "${String.format("%,d", finalAmount)}Ïõê",
            fontSize = 30.sp,
            fontWeight = FontWeight.ExtraBold,
            color = purple,
            textAlign = TextAlign.Center
        )

        // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Ìï†Ïù∏ ÎÇ¥Ïó≠ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        paymentResult?.let { result ->
            if (result.discountAmount > 0 || result.couponDiscount > 0) {
                Spacer(Modifier.height(24.dp))

                SectionCard {
                    // Ï†úÎ™©(ÏïÑÏù¥ÏΩòÏùÄ coupon.png ÏÇ¨Ïö©)
                    SectionHeaderWithImage(
                        title = "Ìï†Ïù∏ ÎÇ¥Ïó≠",
                        imageRes = R.drawable.coupon, // ‚Üê ÎèôÍ∑∏ÎùºÎØ∏ ÎåÄÏã† Ïù¥ÎØ∏ÏßÄ
                        titleColor = purple
                    )

                    Spacer(Modifier.height(12.dp))

                    LabeledAmountRow(
                        label = "ÏõêÎûò Í∏àÏï°",
                        value = "${String.format("%,d", result.originalAmount)}Ïõê",
                        labelColor = textSub,
                        valueColor = textMain
                    )

                    if (result.discountAmount > 0) {
                        Spacer(Modifier.height(8.dp))
                        LabeledAmountRow(
                            label = "Ï†úÌú¥ Ìï†Ïù∏",
                            value = "-${String.format("%,d", result.discountAmount)}Ïõê",
                            labelColor = textSub,
                            valueColor = purple
                        )
                    }

                    if (result.couponDiscount > 0) {
                        Spacer(Modifier.height(8.dp))
                        LabeledAmountRow(
                            label = "Ïø†Ìè∞ Ìï†Ïù∏",
                            value = "-${String.format("%,d", result.couponDiscount)}Ïõê",
                            labelColor = textSub,
                            valueColor = purple
                        )

                        result.usedCoupon?.let { coupon ->
                            Spacer(Modifier.height(4.dp))
                            Text(
                                text = "${String.format("%,d", coupon.amount)}Ïõê Ïø†Ìè∞ÏùÑ ÏÇ¨Ïö©ÌñàÏñ¥Ïöî",
                                fontSize = 11.sp,
                                color = textSub,
                                modifier = Modifier.fillMaxWidth(),
                                textAlign = TextAlign.End
                            )
                        }
                    }

                    Spacer(Modifier.height(12.dp))
                    Divider(color = Color(0xFFE2E8F0), thickness = 1.dp)
                    Spacer(Modifier.height(12.dp))

                    LabeledAmountRow(
                        label = "Ï¥ù Ìï†Ïù∏",
                        value = "-${String.format("%,d", result.discountAmount + result.couponDiscount)}Ïõê",
                        labelColor = textMain,
                        valueColor = purple,
                        labelWeight = FontWeight.Bold,
                        valueWeight = FontWeight.ExtraBold
                    )
                }
            }

            // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Ïø†Ìè∞ Í≤∞Í≥º ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            Spacer(Modifier.height(24.dp))

            val couponResult = paymentResult.couponResult
            if (couponResult?.winning == true) {
                SectionBanner(
                    bg = purple.copy(alpha = 0.10f),
                    title = "ü§© Îü≠ÌÇ§! ${String.format("%,d", couponResult.amount)}Ïõê Ìï†Ïù∏ Ïø†Ìè∞ ÎãπÏ≤®",
                    subtitle = "Ïø†Ìè∞Ìï®ÏùÑ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî",
                    titleColor = purple,
                    subtitleColor = textSub
                )
            } else {
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    modifier = Modifier.width(320.dp)
                ) {
                    Text(
                        text = "üòÖ ÏïÑÏâΩÍ≤åÎèÑ Ìï†Ïù∏ Ïø†Ìè∞ÏùÑ Î™ª Î∞õÏïòÏäµÎãàÎã§",
                        fontSize = 15.sp,
                        fontWeight = FontWeight.Medium,
                        color = textMain,
                        textAlign = TextAlign.Center
                    )
                    Spacer(Modifier.height(4.dp))
                    Text(
                        text = "Îã§ÏùåÏóê Îã§Ïãú ÎèÑÏ†ÑÌï¥Î≥¥ÏÑ∏Ïöî!",
                        fontSize = 13.sp,
                        color = textSub,
                        textAlign = TextAlign.Center
                    )
                }
            }
        }

        Spacer(Modifier.height(40.dp))

        // ÏôÑÎ£å Î≤ÑÌäº
        Button(
            onClick = onComplete,
            modifier = Modifier
                .width(220.dp)
                .height(54.dp)
                .shadow(
                    elevation = 14.dp,
                    spotColor = purple.copy(alpha = 0.25f),
                    ambientColor = purple.copy(alpha = 0.18f),
                    shape = RoundedCornerShape(28.dp)
                ),
            colors = ButtonDefaults.buttonColors(containerColor = purple),
            shape = RoundedCornerShape(28.dp)
        ) {
            Text(
                text = "ÏôÑÎ£å",
                fontSize = 17.sp,
                fontWeight = FontWeight.Bold,
                color = Color.White
            )
        }

        Spacer(Modifier.height(32.dp))
    }
}

/* -------------------------- ÏûëÏùÄ UI Ìó¨ÌçºÎì§ -------------------------- */

@Composable
private fun SectionCard(content: @Composable ColumnScope.() -> Unit) {
    Column(
        modifier = Modifier
            .width(342.dp) // Î≥∏Î¨∏ Ìè≠ Í≥†Ï†ïÏúºÎ°ú ÏãúÏÑ† ÌùêÎ¶Ñ ÏïàÏ†ïÌôî
            .shadow(
                elevation = 10.dp,
                spotColor = Color(0x1A8B5FBF),
                ambientColor = Color(0x1A8B5FBF),
                shape = RoundedCornerShape(16.dp)
            )
            .background(Color.White, RoundedCornerShape(16.dp))
            .padding(16.dp),
        content = content
    )
}

@Composable
private fun SectionHeaderWithImage(
    title: String,
    imageRes: Int,
    titleColor: Color
) {
    Row(verticalAlignment = Alignment.CenterVertically) {
        // coupon.png ÏïÑÏù¥ÏΩò
        Image(
            painter = painterResource(id = imageRes),
            contentDescription = null,
            modifier = Modifier
                .size(24.dp)
                .background(Color.Transparent, RoundedCornerShape(6.dp)),
            contentScale = ContentScale.Fit
        )
        Spacer(Modifier.width(8.dp))
        Text(
            text = title,
            fontSize = 15.sp,
            fontWeight = FontWeight.Bold,
            color = titleColor
        )
    }
}

@Composable
private fun LabeledAmountRow(
    label: String,
    value: String,
    labelColor: Color,
    valueColor: Color,
    labelWeight: FontWeight = FontWeight.Medium,
    valueWeight: FontWeight = FontWeight.Medium
) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            text = label,
            fontSize = 13.sp,
            color = labelColor,
            fontWeight = labelWeight
        )
        Text(
            text = value,
            fontSize = 13.sp,
            color = valueColor,
            fontWeight = valueWeight,
            textAlign = TextAlign.Right
        )
    }
}

@Composable
private fun SectionBanner(
    bg: Color,
    title: String,
    subtitle: String,
    titleColor: Color,
    subtitleColor: Color
) {
    Column(
        modifier = Modifier
            .width(342.dp)
            .background(bg, RoundedCornerShape(12.dp))
            .padding(horizontal = 16.dp, vertical = 14.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = title,
            fontSize = 15.sp,
            fontWeight = FontWeight.Bold,
            color = titleColor,
            textAlign = TextAlign.Center
        )
        Spacer(Modifier.height(4.dp))
        Text(
            text = subtitle,
            fontSize = 13.sp,
            color = subtitleColor,
            textAlign = TextAlign.Center
        )
    }
}
