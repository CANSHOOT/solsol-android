package com.heyyoung.solsol.feature.settlement.presentation.game

import android.Manifest
import android.content.pm.PackageManager
import android.os.Build
import android.widget.Toast
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.content.ContextCompat
import androidx.lifecycle.viewmodel.compose.viewModel
import com.heyyoung.solsol.R
import com.heyyoung.solsol.feature.settlement.domain.game.GameViewModel
import com.heyyoung.solsol.feature.settlement.domain.game.Phase
import com.heyyoung.solsol.feature.settlement.domain.game.Role

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HostScreen(
    onNavigateBack: () -> Unit = {},
    onNavigateToRoom: () -> Unit = {},
    viewModel: GameViewModel = viewModel()
) {
    var roomTitle by remember { mutableStateOf("") }
    var roomAmountText by remember { mutableStateOf("") }

    val role by viewModel.role.collectAsState()
    val isAdvertising by viewModel.nearby.isAdvertising.collectAsState()
    val roomState by viewModel.roomState.collectAsState()

    val context = LocalContext.current

    // OS Î≤ÑÏ†ÑÏóê ÎßûÏ∂∞ ÌïÑÏöîÌïú Í∂åÌïú Íµ¨ÏÑ±
    val requiredPerms = remember {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            buildList {
                add(Manifest.permission.BLUETOOTH_ADVERTISE)
                add(Manifest.permission.BLUETOOTH_SCAN)
                add(Manifest.permission.BLUETOOTH_CONNECT)
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                    // (ÏÑ†ÌÉù) Wi-Fi Í∑ºÍ±∞Î¶¨ ÌÉêÏÉâ ÏÇ¨Ïö© Ïãú
                    add(Manifest.permission.NEARBY_WIFI_DEVICES)
                } else {
                    // Android 10~11 Ïä§Ï∫î Ìò∏Ìôò
                    add(Manifest.permission.ACCESS_FINE_LOCATION)
                }
            }.toTypedArray()
        } else {
            arrayOf(Manifest.permission.ACCESS_FINE_LOCATION)
        }
    }

    fun hasAllPermissions(): Boolean =
        requiredPerms.all { perm ->
            ContextCompat.checkSelfPermission(context, perm) == PackageManager.PERMISSION_GRANTED
        }

    val permissionLauncher = rememberLauncherForActivityResult(
        ActivityResultContracts.RequestMultiplePermissions()
    ) { result ->
        val granted = result.values.all { it }
        val amount = roomAmountText.toLongOrNull()
        if (granted && !roomTitle.isBlank() && amount != null && amount > 0L) {
            viewModel.createRoom(roomTitle.trim(), amount)
        } else if (!granted) {
            Toast.makeText(context, "Í∑ºÍ±∞Î¶¨ Ïó∞Í≤∞ Í∂åÌïúÏùÑ Î™®Îëê ÌóàÏö©Ìï¥Ï£ºÏÑ∏Ïöî.", Toast.LENGTH_SHORT).show()
        }
    }

    // Í¥ëÍ≥†Í∞Ä ÏãúÏûëÎêòÏóàÍ±∞ÎÇò Î∞© Îã®Í≥ÑÍ∞Ä GATHERINGÏù¥Î©¥ Î£∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
    LaunchedEffect(isAdvertising, role, roomState?.phase) {
        if (role == Role.HOST && (isAdvertising || roomState?.phase == Phase.GATHERING)) {
            onNavigateToRoom()
        }
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(
                brush = Brush.verticalGradient(
                    colors = listOf(
                        Color(0xFFF0F4FF),
                        Color(0xFFFFFFFF),
                        Color(0xFFF8FAFF)
                    )
                )
            )
    ) {
        Column(
            modifier = Modifier.fillMaxSize()
        ) {
            // Ìä∏Î†åÎîîÌïú ÌÉë Ïï±Î∞î
            CenterAlignedTopAppBar(
                title = {
                    Text(
                        "Î∞© ÎßåÎì§Í∏∞",
                        fontSize = 20.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFF0F172A)
                    )
                },
                navigationIcon = {
                    IconButton(
                        onClick = onNavigateBack,
                        modifier = Modifier
                            .size(44.dp)
                            .shadow(
                                elevation = 6.dp,
                                shape = RoundedCornerShape(16.dp),
                                spotColor = Color(0xFF8B5CF6).copy(alpha = 0.2f)
                            )
                            .background(
                                brush = Brush.linearGradient(
                                    colors = listOf(
                                        Color.White,
                                        Color(0xFFFAFBFF)
                                    )
                                ),
                                shape = RoundedCornerShape(16.dp)
                            )
                    ) {
                        Icon(
                            Icons.Default.ArrowBack,
                            contentDescription = "Îí§Î°ú",
                            tint = Color(0xFF475569),
                            modifier = Modifier.size(22.dp)
                        )
                    }
                },
                colors = TopAppBarDefaults.centerAlignedTopAppBarColors(
                    containerColor = Color.Transparent
                )
            )

            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(horizontal = 24.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Spacer(modifier = Modifier.height(32.dp))

                // Sol Î°úÍ≥† Ïù¥ÎØ∏ÏßÄ
                Image(
                    painter = painterResource(id = R.drawable.sol),
                    contentDescription = "Sol Î°úÍ≥†",
                    contentScale = ContentScale.FillBounds,
                    modifier = Modifier.size(80.dp)
                )

                Spacer(modifier = Modifier.height(24.dp))

                Text(
                    text = "Í≤åÏûÑÎ∞© ÏÑ§Ï†ï",
                    fontSize = 28.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF1A202C)
                )

                Spacer(modifier = Modifier.height(8.dp))

                Text(
                    text = "Î∞© Ï†úÎ™©Í≥º Ï†ïÏÇ∞ Í∏àÏï°ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî",
                    fontSize = 16.sp,
                    color = Color(0xFF718096)
                )

                Spacer(modifier = Modifier.height(40.dp))

                // Î™®ÎçòÌïú ÏûÖÎ†• ÌïÑÎìúÎì§
                ModernTextField(
                    value = roomTitle,
                    onValueChange = { roomTitle = it },
                    label = "Î∞© Ï†úÎ™©",
                    placeholder = "Ïòà: ÏπúÍµ¨Îì§Í≥º Ï†ÄÎÖÅ Ï†ïÏÇ∞",
                    keyboardOptions = KeyboardOptions(imeAction = ImeAction.Next)
                )

                Spacer(modifier = Modifier.height(16.dp))

                ModernTextField(
                    value = roomAmountText,
                    onValueChange = { input -> roomAmountText = input.filter { it.isDigit() } },
                    label = "Ï†ïÏÇ∞ Í∏àÏï° (Ïõê)",
                    placeholder = "0",
                    keyboardOptions = KeyboardOptions(
                        keyboardType = KeyboardType.Number,
                        imeAction = ImeAction.Done
                    )
                )

                Spacer(modifier = Modifier.height(32.dp))

                // Î™®ÎçòÌïú ÏïàÎÇ¥ Ïπ¥Îìú
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .shadow(
                            elevation = 8.dp,
                            shape = RoundedCornerShape(20.dp),
                            spotColor = Color(0xFF6366F1).copy(alpha = 0.1f)
                        ),
                    colors = CardDefaults.cardColors(
                        containerColor = Color.White
                    ),
                    shape = RoundedCornerShape(20.dp)
                ) {
                    Column(
                        modifier = Modifier.padding(24.dp)
                    ) {
                        Row(
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Box(
                                modifier = Modifier
                                    .size(32.dp)
                                    .background(
                                        Color(0xFF6366F1).copy(alpha = 0.1f),
                                        shape = RoundedCornerShape(8.dp)
                                    ),
                                contentAlignment = Alignment.Center
                            ) {
                                Text(
                                    text = "üí°",
                                    fontSize = 16.sp
                                )
                            }
                            Spacer(modifier = Modifier.width(12.dp))
                            Text(
                                text = "Ìò∏Ïä§Ìä∏ ÏïàÎÇ¥",
                                fontSize = 18.sp,
                                fontWeight = FontWeight.Bold,
                                color = Color(0xFF1A202C)
                            )
                        }

                        Spacer(modifier = Modifier.height(16.dp))

                        InfoItem(text = "Î∞©ÏùÑ ÎßåÎì§Î©¥ Ï£ºÎ≥Ä Í∏∞Í∏∞ÏóêÏÑú Í≤ÄÏÉâÌï† Ïàò ÏûàÏäµÎãàÎã§")
                        Spacer(modifier = Modifier.height(8.dp))
                        InfoItem(text = "Ï∞∏Í∞ÄÏûêÍ∞Ä Î™®Ïù¥Î©¥ Í≤åÏûÑÏùÑ ÏãúÏûëÌï† Ïàò ÏûàÏäµÎãàÎã§")
                        Spacer(modifier = Modifier.height(8.dp))
                        InfoItem(text = "Í≤åÏûÑ ÏßÑÌñâÍ≥º Í≤∞Í≥ºÎ•º Í¥ÄÎ¶¨Ìï©ÎãàÎã§")
                    }
                }

                Spacer(modifier = Modifier.weight(1f))

                // Î™®ÎçòÌïú Î≤ÑÌäº
                Button(
                    onClick = {
                        val amount = roomAmountText.toLongOrNull()
                        if (amount == null || amount <= 0L || roomTitle.isBlank()) {
                            Toast.makeText(context, "Ï†úÎ™©Í≥º Í∏àÏï°ÏùÑ Ïò¨Î∞îÎ•¥Í≤å ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.", Toast.LENGTH_SHORT).show()
                            return@Button
                        }
                        if (hasAllPermissions()) {
                            viewModel.createRoom(roomTitle.trim(), amount)
                        } else {
                            permissionLauncher.launch(requiredPerms)
                        }
                    },
                    enabled = roomTitle.isNotBlank() && !isAdvertising,
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(56.dp)
                        .shadow(
                            elevation = 12.dp,
                            shape = RoundedCornerShape(28.dp),
                            spotColor = Color(0xFF8B5FBF).copy(alpha = 0.3f)
                        ),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFF8B5FBF),
                        disabledContainerColor = Color(0xFF8B5FBF).copy(alpha = 0.3f)
                    ),
                    shape = RoundedCornerShape(28.dp)
                ) {
                    if (isAdvertising) {
                        CircularProgressIndicator(
                            color = Color.White,
                            modifier = Modifier.size(20.dp),
                            strokeWidth = 2.dp
                        )
                        Spacer(modifier = Modifier.width(12.dp))
                        Text(
                            text = "Î∞© ÏÉùÏÑ± Ï§ë...",
                            fontSize = 16.sp,
                            fontWeight = FontWeight.SemiBold,
                            color = Color.White
                        )
                    } else {
                        Text(
                            text = "Î∞© ÎßåÎì§Í∏∞",
                            fontSize = 16.sp,
                            fontWeight = FontWeight.SemiBold,
                            color = Color.White
                        )
                    }
                }

                Spacer(modifier = Modifier.height(40.dp))
            }
        }
    }
}

@Composable
private fun ModernTextField(
    value: String,
    onValueChange: (String) -> Unit,
    label: String,
    placeholder: String,
    keyboardOptions: KeyboardOptions = KeyboardOptions.Default
) {
    Column {
        Text(
            text = label,
            fontSize = 14.sp,
            fontWeight = FontWeight.Medium,
            color = Color(0xFF4A5568),
            modifier = Modifier.padding(bottom = 8.dp)
        )

        OutlinedTextField(
            value = value,
            onValueChange = onValueChange,
            placeholder = {
                Text(
                    placeholder,
                    color = Color(0xFFA0AEC0)
                )
            },
            modifier = Modifier
                .fillMaxWidth()
                .shadow(
                    elevation = 2.dp,
                    shape = RoundedCornerShape(12.dp),
                    spotColor = Color.Black.copy(alpha = 0.05f)
                ),
            keyboardOptions = keyboardOptions,
            colors = OutlinedTextFieldDefaults.colors(
                focusedBorderColor = Color(0xFF8B5FBF),
                unfocusedBorderColor = Color(0xFFE2E8F0),
                focusedContainerColor = Color.White,
                unfocusedContainerColor = Color.White,
                cursorColor = Color(0xFF8B5FBF)
            ),
            shape = RoundedCornerShape(12.dp)
        )
    }
}

@Composable
private fun InfoItem(text: String) {
    Row(
        verticalAlignment = Alignment.Top
    ) {
        Box(
            modifier = Modifier
                .size(6.dp)
                .background(
                    Color(0xFF6366F1),
                    shape = RoundedCornerShape(3.dp)
                )
                .padding(top = 6.dp)
        )
        Spacer(modifier = Modifier.width(12.dp))
        Text(
            text = text,
            fontSize = 14.sp,
            color = Color(0xFF4A5568),
            lineHeight = 20.sp
        )
    }
}